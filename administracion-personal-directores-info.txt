ANÁLISIS COMPLETO DE LA LÓGICA DE ADMINISTRACIÓN PERSONAL - DIRECTORES
================================================================

ENDPOINTS UTILIZADOS:
====================

1. CRUD Básico de Directores:
   - POST /directores - Crear director
   - GET /directores - Listar todos los directores  
   - GET /directores/{id} - Obtener director por ID
   - PATCH /directores/{id} - Actualizar director
   - DELETE /directores/{id} - Eliminar director

2. Gestión de Usuarios Asignados:
   - GET /directores/{id}/usuarios - Verificar usuarios asignados
   - POST /directores/asignar-usuario - Asignar usuario a director
   - PATCH /directores/{id}/cambiar-usuario - Cambiar usuario asignado
   - GET /usuarios/disponibles?rol=DIRECTOR - Obtener usuarios disponibles

DATOS QUE RECIBE EL FRONTEND:
============================

1. Estructura de Director:
   interface Director {
     id_director: string;
     nombres: string;
     apellidos: string;
     email: string;
     telefono?: string;
     direccion?: string;
     usuario?: UsuarioAsignado | null;  // Usuario asociado
     created_at?: string;
     updated_at?: string;
   }

2. Usuario Asignado:
   interface UsuarioAsignado {
     id_user: string;
     nombre_usuario: string;
     password_user: string;
     rol_usuario: string;
     profile_image: string;
     activo: boolean;
     fecha_creacion: string;
     fecha_actualizacion: string;
   }

3. Usuarios Disponibles:
   interface UsuarioDisponible {
     id_user: string;
     nombre_usuario: string;
     rol_usuario: string;
     profile_image: string;
     activo: boolean;
     fecha_creacion: string;
     fecha_actualizacion: string;
   }

DATOS QUE ENVÍA EL FRONTEND:
============================

1. Crear Director:
   interface CreateDirectorDto {
     nombres: string;
     apellidos: string;
     email: string;
     telefono?: string;
     direccion?: string;
   }

2. Actualizar Director:
   interface UpdateDirectorDto {
     nombres?: string;
     apellidos?: string;
     email?: string;
     telefono?: string;
     direccion?: string;
   }

3. Cambiar Usuario:
   interface CambiarUsuarioDto {
     id_user: string | null;  // null para desasignar
   }

FLUJO DE OPERACIONES:
====================

1. Listar Directores:
   - Endpoint: GET /directores
   - Respuesta: {success: true, message: string, data: {directores: Director[]}}
   - Transformación: El servicio convierte data.directores a data directamente

2. Crear Director:
   - Endpoint: POST /directores
   - Payload: CreateDirectorDto
   - Respuesta: {success: boolean, message: string, data?: Director}

3. Asignar/Cambiar Usuario:
   - Endpoint: PATCH /directores/{id}/cambiar-usuario
   - Payload: {id_user: string | null}
   - Lógica: Si id_user es null, desasigna el usuario

4. Verificar Usuarios Asignados:
   - Endpoint: GET /directores/{id}/usuarios
   - Respuesta: {success: boolean, data: {tieneUsuarios: boolean, usuarios?: any[]}}
   - Uso: Para validar si se puede eliminar un director

FUNCIONALIDADES PRINCIPALES:
============================

1. CRUD Completo de directores
2. Asignación de usuarios con rol DIRECTOR
3. Cambio de usuario asignado
4. Desasignación de usuarios
5. Validación antes de eliminar (verificar usuarios asignados)
6. Gestión de estados (loading, errores, éxito)

RELACIÓN DE DATOS:
==================

El sistema maneja una relación 1:1 entre Director y Usuario, donde cada director 
puede tener un usuario asociado para autenticación.

ARCHIVOS PRINCIPALES:
====================

- Componente: src/app/gestion-academica-ar/pages/usuarios/administracion-personal/components/directores-crud/directores-crud.component.ts
- Servicio: src/app/gestion-academica-ar/pages/usuarios/services/director.service.ts
- Interfaces: src/app/gestion-academica-ar/pages/usuarios/interfaces/director.interface.ts
- Template: src/app/gestion-academica-ar/pages/usuarios/administracion-personal/components/directores-crud/directores-crud.component.html

VALIDACIONES DEL FORMULARIO:
============================

- nombres: requerido, min 2 caracteres, max 50 caracteres
- apellidos: requerido, min 2 caracteres, max 50 caracteres
- email: requerido, formato email válido, max 100 caracteres
- telefono: opcional, max 15 caracteres
- direccion: opcional, max 200 caracteres

ESTADOS DEL COMPONENTE:
======================

- showCreateForm: boolean - Mostrar formulario de creación
- showEditForm: boolean - Mostrar formulario de edición
- showDeleteModal: boolean - Mostrar modal de eliminación
- showAssignModal: boolean - Mostrar modal de asignación
- selectedDirector: Director | null - Director seleccionado
- formLoading: boolean - Estado de carga del formulario
- verificandoUsuarios: boolean - Verificando usuarios asignados
- cargandoUsuarios: boolean - Cargando usuarios disponibles

MENSAJES DE ÉXITO:
==================

- "Director creado exitosamente"
- "Director actualizado exitosamente"
- "Director eliminado exitosamente"
- "Usuario asignado exitosamente al director"
- "Usuario desasignado exitosamente del director"
- "Usuario cambiado exitosamente"

MANEJO DE ERRORES:
==================

El componente utiliza ErrorHandlerService para manejar errores HTTP y mostrar 
mensajes de error apropiados al usuario, incluyendo opciones de reintento.

INTEGRACIÓN CON BACKEND:
========================

- URL Base: environment.apiUrl
- Todas las respuestas siguen el formato estándar: {success, message, data, statusCode?, timestamp?}
- Manejo de transformación de datos para compatibilidad con diferentes estructuras de respuesta
- Gestión de estados de carga y errores en todas las operaciones
